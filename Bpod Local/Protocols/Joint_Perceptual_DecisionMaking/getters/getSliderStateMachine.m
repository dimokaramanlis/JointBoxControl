function sma = getSliderStateMachine(choices,actions,times)
sma = NewStateMachine();
sma = SetGlobalTimer(sma,...
                     'TimerID', 1,...
                     'Duration', times.StimulusDuration,...
                     'OnsetDelay',0,...
                     'Channel', 'BNC1',...
                     'OnsetValue',1,...
                     'OffsetValue',0);
sma = AddState(sma, 'Name', 'Start', ...
    'Timer',0,...
    'StateChangeConditions', {'Tup', 'WaitingforBothMiceStart'},...
    'OutputActions', actions.StartAction);
sma = AddState(sma, 'Name', 'WaitingforBothMiceStart', ...
    'Timer',times.InitiationTimeout,...
    'StateChangeConditions', {'BNC1High', 'WaitingforMouse2','BNC2High', 'WaitingforMouse1','Tup', 'customExit'},...
    'OutputActions', actions.WaitingAction);
sma = AddState(sma, 'Name', 'WaitingforMouse2', ...
    'Timer',times.InitiationTimeout,...
    'StateChangeConditions', {'BNC2High', 'BothMiceInZone','BNC1Low', 'WaitingforBothMiceStart','Tup','customExit'},...
    'OutputActions', actions.WaitingAction);
sma = AddState(sma, 'Name', 'WaitingforMouse1', ...
    'Timer',times.InitiationTimeout,...
    'StateChangeConditions', {'BNC1High', 'BothMiceInZone','BNC2Low', 'WaitingforBothMiceStart','Tup','customExit'},...
    'OutputActions', actions.WaitingAction); 
sma = AddState(sma, 'Name', 'BothMiceInZone', ...
    'Timer',0,...
    'StateChangeConditions', {'Tup', 'CheckZoneOut'},...
    'OutputActions', actions.StimulusPresentationAction);
sma = AddState(sma, 'Name', 'CheckZoneOut', ...
    'Timer',times.DecisionTimeout,...
    'StateChangeConditions', {'BNC1Low','BothMiceMakingDecision','BNC2Low','BothMiceMakingDecision','Tup','customExit'},...
    'OutputActions', actions.WaitingAction); 
%% Now add the different choices and outcomes here
    sma = AddState(sma, 'Name', 'BothMiceMakingDecision', ...
        'Timer',times.DecisionTimeout,...
        'StateChangeConditions',{choices.m1CorrectChoice,  'RewardM1First',...
                                 choices.m2CorrectChoice,  'RewardM2First',...
                                 choices.m1IncorrectChoice,'PunishM1First',...
                                 choices.m2InCorrectChoice,'PunishM2First',...
                                 'Tup','customExit'},...
        'OutputActions', actions.WaitingAction);
    
    %% M1 Rewarded First, M2 Rewarded Second, Both Rewarded.
    % (Coming after BothMiceMakingDecision)
    sma = AddState(sma, 'Name', 'RewardM1First', ...
        'Timer',choices.m1ValveTime,...
        'StateChangeConditions', {'Tup', 'RewardedM1WaitingM2'},...
        'OutputActions', [{choices.m1CorrectValve,1,'AnalogIn1', ['#' 1]} actions.WaitingAction]);
    sma = AddState(sma, 'Name', 'RewardedM1WaitingM2', ...
        'Timer',times.DecisionTimeout,...
        'StateChangeConditions', {'Tup', 'customExit', ...
                                  choices.m2CorrectChoice,'RewardM2Second',...
                                  choices.m2InCorrectChoice,'PunishM2Second'},...
        'OutputActions', actions.WaitingAction);
    sma = AddState(sma, 'Name', 'RewardM2Second', ...
        'Timer',choices.m2ValveTime,...
        'StateChangeConditions', {'Tup', 'BothRewarded'},...
        'OutputActions', [{choices.m2CorrectValve,1,'SoftCode',100, 'AnalogIn1', ['#' 2]} actions.WaitingAction]);
    %% M1 Rewarded First, M2 Punished Second, M1RewardedM2Punished.
    %(Coming after RewardedRedM1WaitingM2).
    sma = AddState(sma, 'Name', 'PunishM2Second', ...
        'Timer',0,...
        'StateChangeConditions', {'Tup', 'M1RewardedM2Punished'},...
        'OutputActions', actions.WaitingAction);
    %% M2 Rewarded First, M1 Rewarded Second, Both Rewarded.
    % (Coming after BothMiceMakingDecision)
    sma = AddState(sma, 'Name', 'RewardM2First', ...
        'Timer',choices.m2ValveTime,...
        'StateChangeConditions', {'Tup', 'RewardedM2WaitingM1'},...
        'OutputActions', [{choices.m2CorrectValve,1, 'AnalogIn1', ['#' 2]} actions.WaitingAction]);
    sma = AddState(sma, 'Name', 'RewardedM2WaitingM1', ...
        'Timer',times.DecisionTimeout,...
        'StateChangeConditions', {'Tup', 'customExit',...
                                  choices.m1CorrectChoice,  'RewardM1Second',...
                                  choices.m1IncorrectChoice,'PunishM1Second'},...
        'OutputActions', actions.WaitingAction);
    sma = AddState(sma, 'Name', 'RewardM1Second', ...
        'Timer',choices.m1ValveTime,...
        'StateChangeConditions', {'Tup', 'BothRewarded'},...
        'OutputActions', [{choices.m1CorrectValve,1,'SoftCode',100, 'AnalogIn1', ['#' 1]} actions.WaitingAction]);
    %% M2 Rewarded First, M1 Punished Second, M1RewardedM2Punished.
    %(Coming after RewardedRedM1WaitingM2).
    sma = AddState(sma, 'Name', 'PunishM1Second', ...
        'Timer',0,...
        'StateChangeConditions', {'Tup', 'M2RewardedM1Punished'},...
        'OutputActions', actions.WaitingAction);


      %% M1 Punished First, M2 Rewarded Second, M2RewardedM1Punished
    sma = AddState(sma, 'Name', 'PunishM1First', ...
        'Timer',0,...
        'StateChangeConditions', {'Tup', 'PunishedM1WaitingM2'},...
        'OutputActions', [actions.WaitingAction, 'AnalogIn1', ['#' 1]]);
    sma = AddState(sma, 'Name', 'PunishedM1WaitingM2', ...
        'Timer',times.DecisionTimeout,...
        'StateChangeConditions', {'Tup', 'customExit',...
                                  choices.m2CorrectChoice,  'PunishedM1RewardM2Second',...
                                  choices.m2InCorrectChoice,'PunishedM1PunishM2Second'},...
        'OutputActions', actions.WaitingAction);
    sma = AddState(sma, 'Name', 'PunishedM1RewardM2Second', ...
        'Timer',choices.m2ValveTime,...
        'StateChangeConditions', {'Tup', 'M2RewardedM1Punished'},...
        'OutputActions', [{choices.m2CorrectValve,1,'SoftCode',100, 'AnalogIn1', ['#' 2]} actions.WaitingAction]);
    %% M1 Punished First, M2 Punished Second, BothPunished
    sma = AddState(sma, 'Name', 'PunishedM1PunishM2Second', ...
        'Timer',0,...
        'StateChangeConditions', {'Tup', 'BothPunished'},...
        'OutputActions', [actions.WaitingAction,'SoftCode',100]);

    %% M2 Punished First, M1 Rewarded Second, M1RewardedM2Punished
    sma = AddState(sma, 'Name', 'PunishM2First', ...
        'Timer',0,...
        'StateChangeConditions', {'Tup', 'PunishedM2WaitingM1'},...
        'OutputActions', [actions.WaitingAction, 'AnalogIn1', ['#' 2] ]);
    sma = AddState(sma, 'Name', 'PunishedM2WaitingM1', ...
        'Timer',times.DecisionTimeout,...
        'StateChangeConditions', {'Tup', 'customExit',...
                                   choices.m1CorrectChoice,'PunishedM2RewardM1Second',...
                                   choices.m1IncorrectChoice,'PunishedM2PunishM1Second'},...
        'OutputActions', actions.WaitingAction);
    sma = AddState(sma, 'Name', 'PunishedM2RewardM1Second', ...
        'Timer',choices.m1ValveTime,...
        'StateChangeConditions', {'Tup', 'M1RewardedM2Punished'},...
        'OutputActions', [{choices.m1CorrectValve,1,'SoftCode',100, 'AnalogIn1', ['#' 1]} actions.WaitingAction]);
    %% M1 Punished First, M2 Punished Second, BothPunished
    sma = AddState(sma, 'Name', 'PunishedM2PunishM1Second', ...
        'Timer',0,...
        'StateChangeConditions', {'Tup', 'BothPunished'},...
        'OutputActions', [actions.WaitingAction,'SoftCode',100]);

%% A (performance) trial will result in 4 possibilities: both rewarded, both punished and so on...
sma = AddState(sma, 'Name', 'BothRewarded', ...
    'Timer',0,...
    'StateChangeConditions', {'Tup', 'customExit'},...
    'OutputActions', {});
sma = AddState(sma, 'Name', 'M1RewardedM2Punished', ...
    'Timer',times.PunishmentTimeout,...
    'StateChangeConditions', {'Tup', 'customExit'},...
    'OutputActions', actions.PunishOutputAction);
sma = AddState(sma, 'Name', 'M2RewardedM1Punished', ...
    'Timer',times.PunishmentTimeout,...
    'StateChangeConditions', {'Tup', 'customExit'},...
    'OutputActions', actions.PunishOutputAction);
sma = AddState(sma, 'Name', 'BothPunished', ...
    'Timer',times.PunishmentTimeout,...
    'StateChangeConditions', {'Tup', 'customExit'},...
    'OutputActions', actions.PunishOutputAction);
sma = AddState(sma, 'Name', 'customExit',...
    'Timer',times.ITI,...
    'StateChangeConditions', {'Tup','exit'},...
    'OutputActions',actions.ITIAction);
end