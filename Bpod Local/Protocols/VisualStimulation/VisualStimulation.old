function VisualStimulation
%----------------------------------------------------------------------------
global BpodSystem PTB StimPara
addpath(addpath(genpath('./')));
%F=setupFrame2TTL();
%----------------------------------------------------------------------------
% make sure screens work
[screenIds, screenInvGammaTables] = checkMonitorIdentity('C:\BoxSettings', false);
[PTB.windows, PTB.windowrects]    = prepareStimulusBackground(screenIds, screenInvGammaTables, 0);

% get ifis
for ii = 1:numel(screenIds)
    PTB.ifis(ii)     = Screen('GetFlipInterval', PTB.windows(ii)); 
end
%----------------------------------------------------------------------------
% decide on what to show by reading text files
degPerPixel = 92/1280;
%----------------------------------------------------------------------------
% start analog input module
BpodSystem.assertModule('AnalogIn', 1); % The second argument (1) indicates that AnalogIn must be paired with its USB serial port
A = BpodAnalogIn(BpodSystem.ModuleUSB.AnalogIn1);
A.SamplingRate = 10000; % Hz
A.nActiveChannels = 1; % Record from up to 2 channels
A.Stream2USB(1:2) = 1; % Configure only channels 1 and 2 for USB streaming
A.SMeventsEnabled(1) = 1; % Return threshold crossing events from Ch1
A.Thresholds(1) = 2.5; % Set voltage threshold of Ch1 to 2.5V
A.ResetVoltages(1) = 1; % Voltage must return below 1V before another threshold crossing event can be triggered
A.startReportingEvents; % Enable threshold event signaling
anlgstremfile = fullfile('D:\ExtraData', sprintf('%s_%s_visualstim_analog.mat', ...
    datestr(datetime('now'),'yyyymmdd_HHMM_'), BpodSystem.Status.CurrentSubjectName));
if exist(anlgstremfile,'file')
    delete(anlgstremfile);
end
A.USBStreamFile = anlgstremfile; % Set datafile for analog data captured in this session
A.scope; % Launch Scope GUI
A.scope_StartStop % Start USB streaming + data logging
%------------------------------------------------------------------------------
answer = questdlg('Check settings and start video', ...
    'Start dialog', 'OK','OK');
% %----------------------------------------------------------------------------
stimulishow       = {'NaturalisticWaves','Chirp'};%{'Chirp', 'NaturalisticWaves'};
handlerfuns       = cellfun(@(x) sprintf('%sStimulusFunction',x),stimulishow, 'un',0);
Nstimuli          = numel(handlerfuns);
IRduration        = 0.2;
softcodestart     = 10;
softcodeend       = 100;
betweenstimframes = 60;
% make chirp so that it starts with a white step
delaydt = 0.1;
wp = 50;
%----------------------------------------------------------------------------
for iscreen = 1:numel(screenIds)
    Screen('FillRect', PTB.windows(iscreen), 0.5, PTB.windowrects(iscreen,:));
     Screen('FillRect', PTB.windows(iscreen), 0, ...
         [PTB.windowrects(iscreen,3:4)-wp PTB.windowrects(iscreen, 3:4)]);
    PTB.vbls(iscreen) = Screen('Flip', PTB.windows(iscreen));
end
%----------------------------------------------------------------------------
% test A.write('#', 1);


for istim = 1:Nstimuli
    % change softcodehandler
    BpodSystem.SoftCodeHandlerFunction = handlerfuns{istim};
    [StimPara, PTB] = getStimulusData(stimulishow{istim}, PTB, degPerPixel);
    
    for itrial = 1:StimPara.Nstimtrials

        sma = NewStateMachine(); % Initialize new state machine description
        sma = SetGlobalTimer(sma,...
                         'TimerID', 1, 'Duration', IRduration,...
                         'OnsetDelay',0, 'Channel', 'BNC1',...
                         'OnsetValue',1, 'OffsetValue',0);
        
        % start stim, trigger analog input module, trigger IR lamp
        sma = AddState(sma, 'Name', 'StimulusPresentation', ...
                'Timer', StimPara.Tstim + delaydt, ...
                'StateChangeConditions', {'Tup','customExit'},...
                'OutputActions', ...
                {'SoftCode', softcodestart, 'AnalogIn1',  ['#' istim], 'GlobalTimerTrig', 1});

        sma = AddState(sma, 'Name', 'customExit', ...
                'Timer', StimPara.graytime, ...
                'StateChangeConditions', {'Tup','exit'},...
                'OutputActions',{'SoftCode', softcodeend});

        SendStateMatrix(sma); % Send the state matrix to the Bpod device
        RawEvents = RunStateMatrix; % Run the trial and return events
    end
    % flip screen back to gray
    for iscreen = 1:numel(screenIds)
        Screen('FillRect', PTB.windows(iscreen), 0.5, PTB.windowrects(iscreen,:));
        Screen('FillRect', PTB.windows(iscreen), 0, ...
                    [PTB.windowrects(iscreen,3:4)-wp PTB.windowrects(iscreen, 3:4)]);
        PTB.vbls(iscreen) = Screen('Flip', PTB.windows(iscreen),  PTB.vbls(iscreen) + (betweenstimframes - 0.5) * mean(PTB.ifis));
    end
end
%-------------------------------------------------------------------------
A.scope_StartStop; % Stop Oscope GUI
A.endAcq; % Close Oscope GUI
A.stopReportingEvents; % Stop sendi
sca; % turn off screen
%-------------------------------------------------------------------------
% save data and make folders
MouseName    = BpodSystem.Status.CurrentSubjectName;
ProtocolName = 'VisualStimulation';
datetext    = datestr(datetime('now'),'yyyymmdd');
pathToCopy  = fullfile('C:\Data\', MouseName, 'Behavior', ProtocolName, datetext, 'Session1');

if ~exist(pathToCopy,'dir'), mkdir(pathToCopy); end
copyfile(anlgstremfile, pathToCopy); % copy analog input path
% if exist(BpodSystem.Path.CurrentDataFile,'file')==2
%     copyfile(BpodSystem.Path.CurrentDataFile,[pathToCopy filesep fileName '.mat']);
%     print(myPlots.PerformanceFigure,[pathToCopy filesep fileName '.jpeg'],'-djpeg','-r600');
% else
%     error('No File to Copy! Please check raw data!');
%     return
% end
% make filming path for the corresponding video
filmingPath = fullfile('C:\Data\', MouseName, 'Filming',  ProtocolName, datetext, 'Session1');
if ~exist(filmingPath,'dir'), mkdir(filmingPath); end
%-------------------------------------------------------------------------
end